// Code generated by MockGen. DO NOT EDIT.
// Source: runner/runner.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/mspraggs/quiz/models"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockParser) Parse() (models.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse")
	ret0, _ := ret[0].(models.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockParserMockRecorder) Parse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParser)(nil).Parse))
}

// MockQuestionAsker is a mock of QuestionAsker interface.
type MockQuestionAsker struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionAskerMockRecorder
}

// MockQuestionAskerMockRecorder is the mock recorder for MockQuestionAsker.
type MockQuestionAskerMockRecorder struct {
	mock *MockQuestionAsker
}

// NewMockQuestionAsker creates a new mock instance.
func NewMockQuestionAsker(ctrl *gomock.Controller) *MockQuestionAsker {
	mock := &MockQuestionAsker{ctrl: ctrl}
	mock.recorder = &MockQuestionAskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionAsker) EXPECT() *MockQuestionAskerMockRecorder {
	return m.recorder
}

// AskQuestion mocks base method.
func (m *MockQuestionAsker) AskQuestion(question *models.Question) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskQuestion", question)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskQuestion indicates an expected call of AskQuestion.
func (mr *MockQuestionAskerMockRecorder) AskQuestion(question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskQuestion", reflect.TypeOf((*MockQuestionAsker)(nil).AskQuestion), question)
}
